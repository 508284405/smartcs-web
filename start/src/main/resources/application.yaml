# 应用基本配置
spring:
  application:
    name: smartcs-web
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
  reactor:
    context-propagation: auto # Boot 3.2+ 原生支持
  # Spring Cache配置
  cache:
    type: redis
    redis:
      time-to-live: 1800000 # 30分钟默认TTL
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "smartcs:cache:"
  
  # Kafka配置
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 1
      retries: 3
      linger-ms: 5
      batch-size: 32768
      buffer-memory: 67108864
      enable-idempotence: true
    consumer:
      group-id: smartcs-eval
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest
      enable-auto-commit: true
    admin:
      close-timeout: 10s

# MCP (Model Context Protocol) 配置
mcp:
  server:
    sql:
      enabled: true
      endpoint: "/mcp/sql"
      description: "SQL Query MCP Server"

# SmartCS AI配置
smartcs:
  rag:
    query-transformer:
      enable-pipeline: true
  ai:
    # RAG系统配置
    rag:
      enabled: true
      default-max-results: 5
      default-min-score: 0.7
      content-separator: "\n\n---\n\n"
      max-content-length: 4000
    
    # Web搜索配置
    web-search:
      enabled: false
      searxng:
        base-url: "https://searx.be"
        timeout: 10
        max-results: 8
        user-agent: "SmartCS-Web/1.0.0"
        result-language: "zh-CN"
        safe-content: true
    
    # 工具系统配置
    tools:
      enabled: true
      knowledge-search:
        enabled: true
        max-results: 10
    
    # 结构化输出配置
    structured-output:
      enabled: true
      json-schema: true
    
    # 记忆管理配置
    memory:
      type: redis  # redis, inmemory
      max-messages: 20
      ttl-hours: 24
      cleanup-interval: 1h
      # 降级策略
      fallback:
        enabled: true
    
    # LTM (Long-Term Memory) 长期记忆配置
    ltm:
      # 功能总开关
      enabled: true
      
      # 记忆形成配置
      formation:
        # 重要性阈值，低于此值的内容不会形成记忆
        importance-threshold: 0.5
        # 是否启用语义记忆提取
        semantic-extraction:
          enabled: true
          # 语义提取置信度阈值
          confidence-threshold: 0.7
        # 是否启用程序性记忆学习
        procedural-learning:
          enabled: true
        # 是否异步处理记忆形成
        async:
          enabled: true
      
      # 记忆巩固配置
      consolidation:
        # 定时任务执行时间（cron表达式）
        schedule: "0 0 2 * * ?"
        # 每次处理的批次大小
        batch-size: 100
        # 巩固重要性阈值
        importance-threshold: 0.7
        # 语义巩固
        semantic:
          enabled: true
          # 每个概念最大关联记忆数
          max-episodes-per-concept: 5
        # 程序性巩固
        procedural:
          enabled: true
      
      # 记忆检索配置
      retrieval:
        # 是否启用LTM检索
        enabled: true
        # LTM内容在最终结果中的权重
        weight: 0.3
        # 最大检索结果数
        max-results: 5
        # 相似度阈值
        threshold: 0.7
      # 会话记忆集成（可选）
      context:
        chat-store:
          enabled: false
      
      # 记忆分析配置
      analyzer:
        # 是否使用LLM进行重要性分析
        use-llm: true
        # 分析超时时间（毫秒）
        timeout-ms: 5000
      
      # 用户配置默认值
      user-defaults:
        # 最大情景记忆数量
        max-episodic-memories: 10000
        # 最大语义概念数量
        max-semantic-concepts: 1000
        # 最大程序性模式数量
        max-procedural-patterns: 500
        # 情景记忆保留天数
        episodic-retention-days: 90
        # 是否启用语义遗忘
        semantic-decay-enabled: true
        # 是否启用程序性学习
        procedural-learning-enabled: true
        # 隐私级别 (1=普通, 2=敏感, 3=严格)
        privacy-level: 1
        # 是否启用自动巩固
        auto-consolidation: true
        # 个性化强度 (0.0-1.0)
        personalization-level: 0.70
        # 是否允许记忆共享
        memory-sharing-enabled: false
      
      # 安全配置
      security:
        # 数据加密
        encryption:
          enabled: true
          # 使用与其他敏感数据相同的加密配置
          algorithm: "AES"
          transformation: "AES/GCM/NoPadding"
        # 用户隔离
        user-isolation:
          enabled: true
          strict-mode: true
        # 访问控制
        access-control:
          enabled: true
          # 记忆访问日志
          audit-logging: true
          # 敏感记忆访问限制
          sensitive-access-limit: 100
      
      # 性能优化配置
      performance:
        # 异步任务线程池配置
        async-executor:
          core-pool-size: 2
          max-pool-size: 10
          queue-capacity: 1000
          thread-name-prefix: "ltm-async-"
        # 缓存配置
        cache:
          enabled: true
          # 记忆摘要缓存TTL（秒）
          summary-cache-ttl: 3600
          # 分析结果缓存TTL（秒）
          analysis-cache-ttl: 1800
        # 批量操作配置
        batch:
          # 批量保存大小
          save-batch-size: 50
          # 批量查询大小
          query-batch-size: 100
    
    # 向量存储配置
    vector-store:
      type: redis  # redis, inmemory
      redis:
        index-prefix: "smartcs_"
        dimension: 1536
    
    # 可观测性配置
    observability:
      metrics:
        enabled: true
      tracing:
        enabled: true
      logging:
        enabled: true
        level: info
  
  # NLP到SQL转换配置
  nlp2sql:
    # 功能总开关
    enable-nlp-mode: true
    # 最小置信度阈值（低于此值将提醒用户）
    min-confidence: 0.6
    # 表结构相似度阈值
    similarity-threshold: 0.6
    # SQL生成最大使用表数量
    max-tables-for-sql: 5
    # 是否允许复杂查询（子查询、复杂聚合等）
    enable-complex-queries: true
    
    # 模型配置已移除，现在通过方法参数传递
    
    # 向量存储配置
    schema-index-prefix: "table_schema:"
    schema-search-max-results: 10
    
    # SQL生成提示模板配置
    prompt-template:
      system-message: "你是一个专业的SQL生成助手"
      include-table-relationships: true
      include-column-descriptions: true
      include-business-context: true

  # 敏感信息加密配置（开发环境）
  secrets:
    # 当前使用的密钥ID，用于新加密操作
    activeKid: "dev-key-2024"
    
    # 加密算法配置
    algorithm: "AES"
    transformation: "AES/GCM/NoPadding"
    ivLength: 12    # GCM模式IV长度（字节）
    tagLength: 128  # GCM认证标签长度（位）
    
    # 密钥映射表：密钥ID -> 密钥值（Base64编码的256位AES密钥）
    keys:
      # 开发环境密钥（256位AES密钥，Base64编码）
      "dev-key-2024": "7zMZ79gIhnvzDE+BpCc/kCyDWn/xU7Ku3YXvh7eqk10="

  # 迁移配置
  migration:
    # 是否启用API Key加密迁移（首次部署时设置为true，迁移完成后设置为false）
    encrypt-api-keys: false

  # 文档导入与下载相关配置
import:
  download:
    # 允许的主机白名单（留空表示不启用白名单，仅按私网/回环限制）
    allowed-hosts: []
    # 禁止的主机黑名单
    blocked-hosts: []
    # 最大允许下载文件大小（字节），例如 52428800 = 50MB
    max-file-size: 52428800
    # 连接与读取超时（毫秒）
    connect-timeout-ms: 5000
    read-timeout-ms: 15000

# RAG评估系统配置（简化版）
eval:
  # 评估系统总开关
  enabled: true
  
  # 采样配置
  sampling:
    rate: 0.05                    # 默认5%采样率
    header: "X-RAG-EVAL"          # 强制采样请求头
  
  # Kafka主题配置
  kafka:
    topics:
      rag-events: "rag.events"         # RAG事件主题
  
  # 简化评估服务配置
  simple-eval:
    base-url: "http://localhost:8088"
    timeout-ms: 120000

# PDF解析器优化配置 - 框架代替自定义解析
pdf:
  # 解析器配置
  parser:
    mode: framework                    # 解析模式：framework（推荐）, custom
    enable-quality-assessment: true    # 启用质量评估
    enable-metadata-enhancement: true  # 启用元数据增强
    max-file-size: 50MB               # 最大文件大小限制
  
  # 文本提取配置
  text:
    extractor: apache-tika            # 文本提取器：apache-tika（推荐）
    quality-threshold: 0.6            # 文本质量阈值
    auto-language-detection: true     # 自动语言检测
    preserve-formatting: true        # 保留格式
  
  # 表格提取配置
  table:
    enabled: true                     # 启用表格提取
    extractor: tika-html             # 表格提取器：tika-html
    json-format: true                # 使用JSON格式存储
    include-headers: true            # 包含表头
    min-table-rows: 2                # 最小表格行数
    min-table-columns: 2             # 最小表格列数
  
  # OCR配置
  ocr:
    enabled: false                    # OCR功能（需要Tesseract支持）
    engine: tesseract                # OCR引擎
    language: chi_sim+eng            # 识别语言
    confidence-threshold: 0.7        # 置信度阈值
    min-image-size: 100              # 最小图像尺寸
    batch-processing: true           # 批处理模式
  
  # 多模态内容合并配置
  merger:
    parallel-processing: true        # 并行处理模式
    content-priority: text,table,ocr # 内容优先级
    quality-threshold: 0.5           # 质量阈值
    max-content-length: 50000        # 最大内容长度
    enable-degradation: true         # 启用降级处理
  
  # 图像预处理配置
  image:
    preprocess:
      enabled: true                  # 启用图像预处理
      enhance-contrast: true         # 对比度增强
      auto-resize: true             # 自动调整尺寸
      target-width: 1200            # 目标宽度
      target-height: 1200           # 目标高度
      quality-threshold: 0.8        # 质量阈值
      noise-reduction: true         # 噪点减少
      grayscale-conversion: false   # 灰度转换

# LangChain4j配置
langchain4j:
  community:
    redis:
      # 为社区版 Redis 向量存储 Starter 提供连接参数，避免端口为 null 的 NPE
      host: ${spring.redis.host:localhost}
      port: ${spring.redis.port:6379}
      user: ${spring.redis.username:}
      password: ${spring.redis.password:}
      index-name: "smartcs_embedding_index"
      prefix: "smartcs:embedding:"
      dimension: 1536
  embedding-store:
    redis:
      # 补齐 Redis 连接配置，避免 Starter 读取端口为 null 导致启动失败
      # 默认从 spring.redis 透传；如未配置则使用本地默认 localhost:6379
      host: ${spring.redis.host:localhost}
      port: ${spring.redis.port:6379}
      user: ${spring.redis.username:}
      password: ${spring.redis.password:}
      database: ${spring.redis.database:0}
      index-name: "smartcs_embedding_index"
      prefix: "smartcs:embedding:"
      dimension: 1536
  
  # 模型配置示例
  open-ai:
    chat-model:
      model-name: "gpt-3.5-turbo"
      temperature: 0.7
    streaming-chat-model:
      model-name: "gpt-3.5-turbo"
      temperature: 0.7

  # Ollama 配置示例（注释形式，实际使用请通过数据库配置Provider和Model）
  # ollama:
  #   chat-model:
  #     base-url: "http://localhost:11434"
  #     model-name: "llama3"
  #     timeout: "2m"
  #   streaming-chat-model:
  #     base-url: "http://localhost:11434"
  #     model-name: "llama3"
  #     timeout: "2m"
  #   embedding-model:
  #     base-url: "http://localhost:11434"
  #     model-name: "nomic-embed-text"
  #     timeout: "2m"
  #
  # Ollama 使用说明：
  # 1. 安装并启动 Ollama 服务
  # 2. 拉取模型：ollama pull llama3 && ollama pull nomic-embed-text
  # 3. 在管理界面创建 Provider，类型选择 OLLAMA，端点设置为 http://localhost:11434
  # 4. 创建 Model，关联到上述 Provider，模型名称设置为已拉取的模型名

# 指标配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,tracing
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true
  # OpenTelemetry和Micrometer Tracing配置
  tracing:
    enabled: true
    sampling:
      probability: 1.0  # 开发环境100%采样，生产环境建议调低
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces  # 替换为实际OTEL Collector地址
      timeout: 10s
      compression: gzip
      headers:
        authorization: Bearer your-token  # 如果需要认证

# 日志配置
logging:
  level:
    root: info
    com:
      leyue:
        smartcs:
            config:
              feign: debug
            app:
              rag: debug
              ai: debug
              observability: info
    dev:
      langchain4j: debug
    io.github.resilience4j: debug

# Resilience4j 熔断器配置
resilience4j:
  circuitbreaker:
    instances:
      redis-memory-store:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 60s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.lang.Exception
      id-generator-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
      user-center-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
      order-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
  retry:
    instances:
      redis-memory-store:
        max-attempts: 3
        wait-duration: 1s
        retry-exceptions:
          - java.lang.Exception
      id-generator-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
      user-center-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
      order-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
  ratelimiter:
    instances:
      redis-memory-store:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 5s
      id-generator-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
      user-center-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
      order-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
  timelimiter:
    instances:
      redis-memory-store:
        timeout-duration: 10s
        cancel-running-future: true
      id-generator-feign:
        timeout-duration: 5s
        cancel-running-future: true
      user-center-feign:
        timeout-duration: 5s
        cancel-running-future: true
      order-feign:
        timeout-duration: 5s
        cancel-running-future: true
  bulkhead:
    instances:
      redis-memory-store:
        max-concurrent-calls: 20
        max-wait-duration: 5s
      id-generator-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s
      user-center-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s
      order-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s

# 权限白名单配置
permission:
  white-list:
    - "/smartcs/api/app/**"
    - "/api/test/**"

# server:
#  servlet:
#    context-path: /smartcs
