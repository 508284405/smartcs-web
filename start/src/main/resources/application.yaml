# 应用基本配置
spring:
  application:
    name: smartcs-web
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    cors:
      enabled: true
    mapping:
      /**:
        allowed-origins: "*"
        allowed-methods: "*"
        allowed-headers: "*"
        allow-credentials: true
        max-age: 3600
  reactor:
    context-propagation: auto # Boot 3.2+ 原生支持
  # Spring Cache配置
  cache:
    type: redis
    redis:
      time-to-live: 1800000 # 30分钟默认TTL
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "smartcs:cache:"

# MCP (Model Context Protocol) 配置
mcp:
  server:
    sql:
      enabled: true
      endpoint: "/mcp/sql"
      description: "SQL Query MCP Server"

# SmartCS AI配置
smartcs:
  ai:
    # RAG系统配置
    rag:
      enabled: true
      default-max-results: 5
      default-min-score: 0.7
      content-separator: "\n\n---\n\n"
      max-content-length: 4000
    
    # Web搜索配置
    web-search:
      enabled: false
      searxng:
        base-url: "https://searx.be"
        timeout: 10
        max-results: 8
        user-agent: "SmartCS-Web/1.0.0"
        result-language: "zh-CN"
        safe-content: true
    
    # 工具系统配置
    tools:
      enabled: true
      knowledge-search:
        enabled: true
        max-results: 10
    
    # 结构化输出配置
    structured-output:
      enabled: true
      json-schema: true
    
    # 记忆管理配置
    memory:
      type: redis  # redis, inmemory
      max-messages: 20
      ttl-hours: 24
      cleanup-interval: 1h
    
    # 向量存储配置
    vector-store:
      type: redis  # redis, inmemory
      redis:
        index-prefix: "smartcs_"
        dimension: 1536
    
    # 可观测性配置
    observability:
      metrics:
        enabled: true
      tracing:
        enabled: true
      logging:
        enabled: true
        level: info

# PDF解析器优化配置 - 框架代替自定义解析
pdf:
  # 解析器配置
  parser:
    mode: framework                    # 解析模式：framework（推荐）, custom
    enable-quality-assessment: true    # 启用质量评估
    enable-metadata-enhancement: true  # 启用元数据增强
    max-file-size: 50MB               # 最大文件大小限制
  
  # 文本提取配置
  text:
    extractor: apache-tika            # 文本提取器：apache-tika（推荐）
    quality-threshold: 0.6            # 文本质量阈值
    auto-language-detection: true     # 自动语言检测
    preserve-formatting: true        # 保留格式
  
  # 表格提取配置
  table:
    enabled: true                     # 启用表格提取
    extractor: tika-html             # 表格提取器：tika-html
    json-format: true                # 使用JSON格式存储
    include-headers: true            # 包含表头
    min-table-rows: 2                # 最小表格行数
    min-table-columns: 2             # 最小表格列数
  
  # OCR配置
  ocr:
    enabled: false                    # OCR功能（需要Tesseract支持）
    engine: tesseract                # OCR引擎
    language: chi_sim+eng            # 识别语言
    confidence-threshold: 0.7        # 置信度阈值
    min-image-size: 100              # 最小图像尺寸
    batch-processing: true           # 批处理模式
  
  # 多模态内容合并配置
  merger:
    parallel-processing: true        # 并行处理模式
    content-priority: text,table,ocr # 内容优先级
    quality-threshold: 0.5           # 质量阈值
    max-content-length: 50000        # 最大内容长度
    enable-degradation: true         # 启用降级处理
  
  # 图像预处理配置
  image:
    preprocess:
      enabled: true                  # 启用图像预处理
      enhance-contrast: true         # 对比度增强
      auto-resize: true             # 自动调整尺寸
      target-width: 1200            # 目标宽度
      target-height: 1200           # 目标高度
      quality-threshold: 0.8        # 质量阈值
      noise-reduction: true         # 噪点减少
      grayscale-conversion: false   # 灰度转换

# LangChain4j配置
langchain4j:
  embedding-store:
    redis:
      index-name: "smartcs_embedding_index"
      prefix: "smartcs:embedding:"
      dimension: 1536
  
  # 模型配置示例
  open-ai:
    chat-model:
      model-name: "gpt-3.5-turbo"
      temperature: 0.7
    streaming-chat-model:
      model-name: "gpt-3.5-turbo"
      temperature: 0.7

# 指标配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true

# 日志配置
logging:
  level:
    root: info
    com:
      leyue:
        smartcs:
            config:
              feign: debug
            app:
              rag: debug
              ai: debug
              observability: info
    dev:
      langchain4j: debug
    io.github.resilience4j: debug

# Resilience4j 熔断器配置
resilience4j:
  circuitbreaker:
    instances:
      redis-memory-store:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 60s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.lang.Exception
      id-generator-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
      user-center-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
      order-feign:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
  retry:
    instances:
      redis-memory-store:
        max-attempts: 3
        wait-duration: 1s
        retry-exceptions:
          - java.lang.Exception
      id-generator-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
      user-center-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
      order-feign:
        max-attempts: 2
        wait-duration: 500ms
        retry-exceptions:
          - java.lang.Exception
  ratelimiter:
    instances:
      redis-memory-store:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 5s
      id-generator-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
      user-center-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
      order-feign:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 3s
  timelimiter:
    instances:
      redis-memory-store:
        timeout-duration: 10s
        cancel-running-future: true
      id-generator-feign:
        timeout-duration: 5s
        cancel-running-future: true
      user-center-feign:
        timeout-duration: 5s
        cancel-running-future: true
      order-feign:
        timeout-duration: 5s
        cancel-running-future: true
  bulkhead:
    instances:
      redis-memory-store:
        max-concurrent-calls: 20
        max-wait-duration: 5s
      id-generator-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s
      user-center-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s
      order-feign:
        max-concurrent-calls: 10
        max-wait-duration: 3s

# 权限白名单配置
permission:
  white-list:
    - "/smartcs/api/app/**"

# server:
#  servlet:
#    context-path: /smartcs
