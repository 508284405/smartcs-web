---
description: 编写代码应该遵守的规范
globs: 
alwaysApply: false
---
## 代码规范

### 通用规范
- 使用UTF-8编码；代码注释为中文
- 使用详细注释解释代码
- 保证代码简洁清晰，模块化清晰，仅创建必须的类
- 在新增类或代码逻辑之前，应先查看是否已实现类似逻辑，用修改代替创建
- 在修改代码前分析原有业务逻辑，非必要情况下不能删除已完善的业务逻辑
- 统一时间戳类型为毫秒（`long`）(优先级最高)
- 使用`@Slf4j`注解定义日志对象
- 禁止使用魔法数字，可使用常量或者枚举。

### Java规范
- 命名规范：
  - 类名使用`PascalCase`
  - 方法/变量使用`camelCase`
  - 常量全大写并下划线分隔
- 使用Lombok简化代码：
  - `@Data`注解定义getter和setter方法
  - `@Builder`注解定义builder方法
  - `@AllArgsConstructor`注解定义全参构造方法
  - `@NoArgsConstructor`注解定义无参构造方法
- 异常处理：统一抛出`BizException`，并记录详细日志

### Spring Boot规范
- 配置文件：`application.yml`划分`dev/test/prod`段；敏感信息使用环境变量或Vault
- Bean注入：构造函数注入优先，使用lombok的类注解@RequiredArgsConstructor和final属性方式。
- 接口定义：`@RestController` + `@RequestMapping`

### MyBatis-Plus规范
- Mapper接口继承`BaseMapper<DO>`
- 禁止注解写SQL，使用XML文件
- DO继承公共`BaseDO`，并放在`dataobject`目录
- 查询分页：使用`PageQuery`/`PageResponse`

### 提交及分支策略
- Git分支：`feat/`/`fix/`/`hotfix/`；Pull Request必须关联JIRA编号
- Commit信息遵循Conventional Commits

### 测试规范
- 单元测试使用JUnit5 + Mockito；覆盖核心业务逻辑
- 集成测试放置于`src/test/java`，使用Spring Boot Test

## 开发流程指南

1. 在每一层编写代码之前，先查阅本规则文件，并查阅项目中相关组件的版本号，使用规定版本内的代码进行编码。
2. 遵循DDD分层架构原则，严格按照各层职责开发
3. 修改代码前，确保理解现有业务逻辑和技术实现
4. 代码提交前进行自测，确保符合代码规范
5. 禁用swagger代码